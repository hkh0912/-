#include<iostream>
#include<windows.h>
#include<queue>
using namespace std;

int map[101][101];
bool visit[101][101];
int n, m;
int dy[8] = { 1, -1, 0, 0, -1, -1, 1, 1 }; // 밑, 위, 오, 왼, 좌상, 우상, 좌하, 우하
int dx[8] = { 0, 0, 1, -1, -1, 1, -1, 1 };

void dfs(int a, int b);
int cnt = 0;
queue<pair<int, int>>q;
int main(void) {
	cin >> m >> n;
	while (1) {

		if (n == 0 && m == 0) {
			break;
		}
		for (int a = 0; a < n; a++){
			for (int b = 0; b < m; b++) {
				visit[a][b] = 0;
			}
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				cin >> map[i][j];
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] && !visit[i][j]) {
					visit[i][j] = true;
					dfs(i ,j); // i 행 j 열
					cnt++;

				}
			}
		}
		cout << cnt << endl;
		cnt = 0;
		cin >> m >> n; //m 열 n 행
	}
	
	system("pause");
}

void dfs(int y, int x) { //y행 x열
	
	for (int i = 0; i < 8; i++) {
		int y2 = y + dy[i];
		int x2 = x + dx[i];

		//cout << y2 << x2 << endl;

		if (x2 >= 0 && x2 < m && y2 >= 0 && y2 < n){
			if (map[y2][x2] && !visit[y2][x2]){
				visit[y2][x2] = true;
				dfs(y2, x2);
			}
		}
	}
}
