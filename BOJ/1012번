#include<iostream>
#include<windows.h>
#include<queue>

using namespace std;

int n, m, a, line, c, d, cnt;
bool visit[51][51];
int arr[51][51];
void bfs(int a, int b);
int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };
queue<pair<int, int>>q;
int main(void) {
	cin >> a;
	for (int i = 0; i < a; i++) {
		cnt = 0;
		cin >> n >> m >> line;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				arr[i][j] = 0;
				visit[i][j] = false;
			}
		}
		for (int i = 0; i < line; i++) {
			cin >> c >> d;
			arr[c][d] = 1;
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (arr[i][j] == 1 && !visit[i][j]) {
					visit[i][j] = true;
					bfs(i, j);
					cnt++;
				}
			}
		}
		cout << cnt << endl;
	}
	system("pause");
}
void bfs(int a, int b) {
	q.push(make_pair(a, b));
	while (!q.empty()) {
		int x1 = q.front().first;
		int y1 = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int x2 = x1 + dx[i];
			int y2 = y1 + dy[i];

			if (x2 >= 0 && x2 < n && y2 >= 0 && y2 < m) {
				if (!visit[x2][y2] && arr[x2][y2] == 1) {
					visit[x2][y2] = true;
					bfs(x2, y2);
				}
			}

		}
		
	}
}
